diff --git a/CMakeLists.txt b/CMakeLists.txt
new file mode 100644
index 0000000..37e3ff9
--- /dev/null
+++ b/CMakeLists.txt
@@ -0,0 +1,20 @@
+project(android-corelibs)
+
+cmake_minimum_required(VERSION 2.8)
+include(/usr/share/android/cmake/AndroidConfig.cmake)
+
+add_subdirectory(liblog)
+add_subdirectory(libcutils)
+add_subdirectory(libbacktrace)
+add_subdirectory(libutils)
+add_subdirectory(libsparse)
+add_subdirectory(libziparchive)
+add_subdirectory(libzipfile)
+
+install(DIRECTORY ${PROJECT_SOURCE_DIR}/include/android DESTINATION ${INSTALL_INCLUDE_DIR} FILES_MATCHING PATTERN "*.h")
+install(DIRECTORY ${PROJECT_SOURCE_DIR}/include/system DESTINATION ${INSTALL_INCLUDE_DIR} FILES_MATCHING PATTERN "*.h")
+
+
+
+
+
diff --git a/include/cutils/atomic-gcc.h b/include/cutils/atomic-gcc.h
new file mode 100644
index 0000000..decf2af
--- /dev/null
+++ b/include/cutils/atomic-gcc.h
@@ -0,0 +1,170 @@
+/*
+ * Copyright (C) 2010 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef ANDROID_CUTILS_ATOMIC_GCC_H
+#define ANDROID_CUTILS_ATOMIC_GCC_H
+
+#include <stdint.h>
+
+#ifndef ANDROID_ATOMIC_INLINE
+#define ANDROID_ATOMIC_INLINE inline __attribute__((always_inline))
+#endif
+
+extern ANDROID_ATOMIC_INLINE void android_compiler_barrier(void)
+{
+    __sync_synchronize();
+}
+
+extern ANDROID_ATOMIC_INLINE void android_memory_barrier(void)
+{
+    android_compiler_barrier();
+}
+extern ANDROID_ATOMIC_INLINE void android_memory_store_barrier(void)
+{
+    android_compiler_barrier();
+}
+
+extern ANDROID_ATOMIC_INLINE int32_t
+android_atomic_acquire_load(volatile const int32_t *ptr)
+{
+    int32_t value = *ptr;
+    android_compiler_barrier();
+    return value;
+}
+
+extern ANDROID_ATOMIC_INLINE intptr_t
+android_atomic_acquire_load_ip(volatile const intptr_t *ptr)
+{
+    intptr_t value = *ptr;
+    android_compiler_barrier();
+    return value;
+}
+
+extern ANDROID_ATOMIC_INLINE int32_t
+android_atomic_release_load(volatile const int32_t *ptr)
+{
+    android_memory_barrier();
+    return *ptr;
+}
+
+extern ANDROID_ATOMIC_INLINE intptr_t
+android_atomic_release_load_ip(volatile const intptr_t *ptr)
+{
+    android_memory_barrier();
+    return *ptr;
+}
+
+extern ANDROID_ATOMIC_INLINE void
+android_atomic_acquire_store(int32_t value, volatile int32_t *ptr)
+{
+    *ptr = value;
+    android_memory_barrier();
+}
+
+extern ANDROID_ATOMIC_INLINE void
+android_atomic_acquire_store_ip(intptr_t value, volatile intptr_t *ptr)
+{
+    *ptr = value;
+    android_memory_barrier();
+}
+
+extern ANDROID_ATOMIC_INLINE void
+android_atomic_release_store(int32_t value, volatile int32_t *ptr)
+{
+    android_compiler_barrier();
+    *ptr = value;
+}
+
+extern ANDROID_ATOMIC_INLINE void
+android_atomic_release_store_ip(intptr_t value, volatile intptr_t *ptr)
+{
+    android_compiler_barrier();
+    *ptr = value;
+}
+
+extern ANDROID_ATOMIC_INLINE int
+android_atomic_cas(int32_t old_value, int32_t new_value, volatile int32_t *ptr)
+{
+	return __sync_bool_compare_and_swap(ptr, old_value, new_value);
+}
+
+extern ANDROID_ATOMIC_INLINE int
+android_atomic_acquire_cas(int32_t old_value,
+                           int32_t new_value,
+                           volatile int32_t *ptr)
+{
+    /* Loads are not reordered with other loads. */
+    return android_atomic_cas(old_value, new_value, ptr);
+}
+
+extern ANDROID_ATOMIC_INLINE int
+android_atomic_acquire_cas_ip(intptr_t old_value,
+                           intptr_t new_value,
+                           volatile intptr_t *ptr)
+{
+    return __sync_bool_compare_and_swap(ptr, old_value, new_value);
+}
+
+
+extern ANDROID_ATOMIC_INLINE int
+android_atomic_release_cas(int32_t old_value,
+                           int32_t new_value,
+                           volatile int32_t *ptr)
+{
+    /* Stores are not reordered with other stores. */
+    return android_atomic_cas(old_value, new_value, ptr);
+}
+
+extern ANDROID_ATOMIC_INLINE int
+android_atomic_release_cas_ip(intptr_t old_value,
+                           intptr_t new_value,
+                           volatile intptr_t *ptr)
+{
+    /* Stores are not reordered with other stores. */
+    return __sync_bool_compare_and_swap(ptr, old_value, new_value);
+}
+
+extern ANDROID_ATOMIC_INLINE int32_t
+android_atomic_add(int32_t increment, volatile int32_t *ptr)
+{
+	return __sync_fetch_and_add(ptr, increment);
+}
+
+extern ANDROID_ATOMIC_INLINE int32_t
+android_atomic_inc(volatile int32_t *addr)
+{
+    return android_atomic_add(1, addr);
+}
+
+extern ANDROID_ATOMIC_INLINE int32_t
+android_atomic_dec(volatile int32_t *addr)
+{
+    return android_atomic_add(-1, addr);
+}
+
+extern ANDROID_ATOMIC_INLINE int32_t
+android_atomic_and(int32_t value, volatile int32_t *ptr)
+{
+ 	return __sync_fetch_and_and(ptr, value);
+}
+
+extern ANDROID_ATOMIC_INLINE int32_t
+android_atomic_or(int32_t value, volatile int32_t *ptr)
+{
+    return __sync_fetch_and_or(ptr, value);
+}
+
+#endif /* ANDROID_CUTILS_ATOMIC_GCC_H */
diff --git a/include/cutils/atomic.h b/include/cutils/atomic.h
index 1787e34..c9511d8 100644
--- a/include/cutils/atomic.h
+++ b/include/cutils/atomic.h
@@ -78,7 +78,9 @@ int32_t android_atomic_or(int32_t value, volatile int32_t* addr);
  * from a 32-bit aligned address is atomic on all supported platforms.
  */
 int32_t android_atomic_acquire_load(volatile const int32_t* addr);
+intptr_t android_atomic_acquire_load_ip(volatile const intptr_t* addr);
 int32_t android_atomic_release_load(volatile const int32_t* addr);
+intptr_t android_atomic_release_load_ip(volatile const intptr_t* addr);
 
 #if defined (__LP64__)
 int64_t android_atomic_acquire_load64(volatile const int64_t* addr);
@@ -92,13 +94,16 @@ int64_t android_atomic_release_load64(volatile const int64_t* addr);
  * to a 32-bit aligned address is atomic on all supported platforms.
  */
 void android_atomic_acquire_store(int32_t value, volatile int32_t* addr);
+void android_atomic_acquire_store_ip(intptr_t value, volatile intptr_t* addr);
 void android_atomic_release_store(int32_t value, volatile int32_t* addr);
 
+
 #if defined (__LP64__)
 void android_atomic_acquire_store64(int64_t value, volatile int64_t* addr);
 void android_atomic_release_store64(int64_t value, volatile int64_t* addr);
 #endif
 
+
 /*
  * Compare-and-set operation with "acquire" or "release" ordering.
  *
@@ -113,8 +118,12 @@ void android_atomic_release_store64(int64_t value, volatile int64_t* addr);
  */
 int android_atomic_acquire_cas(int32_t oldvalue, int32_t newvalue,
         volatile int32_t* addr);
+int android_atomic_acquire_cas_ip(intptr_t oldvalue, intptr_t newvalue,
+        volatile intptr_t* addr);
 int android_atomic_release_cas(int32_t oldvalue, int32_t newvalue,
         volatile int32_t* addr);
+int android_atomic_release_cas_ip(intptr_t oldvalue, intptr_t newvalue,
+        volatile intptr_t* addr);
 
 #if defined (__LP64__)
 int64_t android_atomic_acquire_cas64(int64_t old_value, int64_t new_value,
diff --git a/include/cutils/memory.h b/include/cutils/memory.h
index e725cdd..ddf757f 100644
--- a/include/cutils/memory.h
+++ b/include/cutils/memory.h
@@ -30,6 +30,9 @@ void android_memset16(uint16_t* dst, uint16_t value, size_t size);
 /* size is given in bytes and must be multiple of 4 */
 void android_memset32(uint32_t* dst, uint32_t value, size_t size);
 
+/* size is given in bytes and must be multiple of pointer size */
+void android_memsetip(uintptr_t* dst, uintptr_t value, size_t size);
+
 #if !HAVE_STRLCPY
 /* Declaration of strlcpy() for platforms that don't already have it. */
 size_t strlcpy(char *dst, const char *src, size_t size);
diff --git a/include/cutils/properties.h b/include/cutils/properties.h
index 2c70165..6617197 100644
--- a/include/cutils/properties.h
+++ b/include/cutils/properties.h
@@ -19,7 +19,9 @@
 
 #include <sys/cdefs.h>
 #include <stddef.h>
-#include <sys/system_properties.h>
+
+#define PROP_NAME_MAX   32
+#define PROP_VALUE_MAX  92
 
 #ifdef __cplusplus
 extern "C" {
diff --git a/libbacktrace/CMakeLists.txt b/libbacktrace/CMakeLists.txt
new file mode 100644
index 0000000..94cc992
--- /dev/null
+++ b/libbacktrace/CMakeLists.txt
@@ -0,0 +1,41 @@
+
+find_package(Threads REQUIRED)
+find_package(Unwind REQUIRED)
+
+string(TOLOWER ${CMAKE_SYSTEM_PROCESSOR} ARCH_SUFFIX)
+
+FIND_LIBRARY(UNWIND_LIBRARY unwind PATHS ${UNWIND_LIBRARY_DIRS} NO_DEFAULT_PATH)
+FIND_LIBRARY(UNWIND_LIBRARY_PTRACE unwind-ptrace PATHS ${UNWIND_LIBRARY_DIRS} NO_DEFAULT_PATH)
+FIND_LIBRARY(UNWIND_LIBRARY_ARCH unwind-${ARCH_SUFFIX} PATHS ${UNWIND_LIBRARY_DIRS} NO_DEFAULT_PATH)
+
+include_directories ("${PROJECT_SOURCE_DIR}/include")
+include_directories ("${PROJECT_SOURCE_DIR}/../include")
+include_directories(${PROJECT_BINARY_DIR})
+include_directories(${UNWIND_INCLUDE_DIRS})
+add_definitions(-include ${CMAKE_BINARY_DIR}/config.h)
+
+
+set(SRC_LIST 
+	BacktraceImpl.cpp
+	BacktraceMap.cpp
+	BacktraceThread.cpp
+	thread_utils.c
+	UnwindCurrent.cpp
+	UnwindMap.cpp 
+	UnwindPtrace.cpp
+	)
+
+
+
+
+
+
+add_library(backtrace SHARED ${SRC_LIST} ${HOST_SRC_LIST})
+SET_TARGET_PROPERTIES(backtrace PROPERTIES LINK_FLAGS -Wl,--no-undefined)
+target_link_libraries(backtrace cutils log ${UNWIND_LIBRARY} ${UNWIND_LIBRARY_PTRACE} ${UNWIND_LIBRARY_ARCH} ${CMAKE_THREAD_LIBS_INIT})
+
+install(TARGETS backtrace DESTINATION ${INSTALL_LIB_DIR})
+install(DIRECTORY ${PROJECT_SOURCE_DIR}/include/backtrace DESTINATION ${INSTALL_INCLUDE_DIR} FILES_MATCHING PATTERN "*.h")
+
+
+
diff --git a/libbacktrace/UnwindMap.cpp b/libbacktrace/UnwindMap.cpp
index 4f9831b..a06064d 100644
--- a/libbacktrace/UnwindMap.cpp
+++ b/libbacktrace/UnwindMap.cpp
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
+#include <stdlib.h>
 #include <pthread.h>
 #include <stdlib.h>
 #include <sys/types.h>
diff --git a/libcutils/CMakeLists.txt b/libcutils/CMakeLists.txt
new file mode 100644
index 0000000..9186c7e
--- /dev/null
+++ b/libcutils/CMakeLists.txt
@@ -0,0 +1,67 @@
+find_package(Threads REQUIRED)
+
+include_directories ("${PROJECT_SOURCE_DIR}/include")
+include_directories ("${PROJECT_SOURCE_DIR}/../include")
+include_directories (${PROJECT_BINARY_DIR})
+
+set (COMMON_SRC_LIST hashmap.c
+	atomic.c
+	native_handle.c
+	socket_inaddr_any_server.c
+	socket_local_client.c
+	socket_local_server.c
+	socket_loopback_client.c
+	socket_loopback_server.c
+	socket_network_client.c
+	sockets.c
+	config_utils.c
+	cpu_info.c
+	load_file.c
+	open_memstream.c
+	strdup16to8.c
+	strdup8to16.c
+	record_stream.c
+	process_name.c
+	threads.c
+	sched_policy.c
+	iosched_policy.c
+	str_parms.c
+	properties.c
+	multiuser.c
+	fs.c
+	memory.c
+	)
+
+set (TARGET_SRC_LIST android_reboot.c
+        ashmem-dev.c
+        debugger.c
+        klog.c
+        mq.c
+        partition_utils.c
+        qtaguid.c
+		trace.c
+        uevent.c)
+
+
+if (CMAKE_SYSTEM_PROCESSOR STREQUAL "x86")
+	set(SRC_LIST ${COMMON_SRC_LIST} arch-x86/android_memset16.S arch-x86/android_memset32.S)
+	add_definitions(-DHAVE_MEMSET16 -DHAVE_MEMSET32)
+elseif (CMAKE_SYSTEM_PROCESSOR STREQUAL "x86_64")
+	set(SRC_LIST ${COMMON_SRC_LIST}   arch-x86_64/android_memset16_SSE2-atom.S arch-x86_64/android_memset32_SSE2-atom.S)
+	add_definitions(-DHAVE_MEMSET16 -DHAVE_MEMSET32)
+elseif (CMAKE_SYSTEM_PROCESSOR STREQUAL "arm")
+	set(SRC_LIST ${COMMON_SRC_LIST} arch-arm/memset32.S)
+else ()
+	set(SRC_LIST ${COMMON_SRC_LIST})
+endif ()
+
+
+add_library (cutils SHARED ${SRC_LIST})
+SET_TARGET_PROPERTIES (cutils PROPERTIES LINK_FLAGS -Wl,--no-undefined)
+target_link_libraries (cutils log ${CMAKE_THREAD_LIBS_INIT})
+
+install (TARGETS cutils DESTINATION ${INSTALL_LIB_DIR})
+install (DIRECTORY ${PROJECT_SOURCE_DIR}/include/cutils DESTINATION ${INSTALL_INCLUDE_DIR} FILES_MATCHING PATTERN "*.h")
+
+
+
diff --git a/libcutils/memory.c b/libcutils/memory.c
index 6486b45..887a7a6 100644
--- a/libcutils/memory.c
+++ b/libcutils/memory.c
@@ -36,6 +36,16 @@ void android_memset32(uint32_t* dst, uint32_t value, size_t size)
 }
 #endif
 
+#if !HAVE_MEMSETIP
+void android_memsetip(uintptr_t* dst, uintptr_t value, size_t size)
+{
+    size >>= 2;
+    while (size--) {
+        *dst++ = value;
+    }
+}
+#endif
+
 #if !HAVE_STRLCPY
 /*
  * Copyright (c) 1998 Todd C. Miller <Todd.Miller@courtesan.com>
diff --git a/liblog/CMakeLists.txt b/liblog/CMakeLists.txt
new file mode 100644
index 0000000..1bfd4c8
--- /dev/null
+++ b/liblog/CMakeLists.txt
@@ -0,0 +1,31 @@
+find_package(Threads REQUIRED)
+
+include_directories ("${PROJECT_SOURCE_DIR}/include")
+include_directories ("${PROJECT_SOURCE_DIR}/../include")
+include_directories(${PROJECT_BINARY_DIR})
+
+set(SRC_LIST 
+	logd_write.c
+	uio.c
+	)
+
+set(TARGET_SRC_LIST )
+
+set(HOST_SRC_LIST fake_log_device.c)
+
+
+
+add_definitions(-DFAKE_LOG_DEVICE=1)
+
+
+
+add_library(log SHARED ${SRC_LIST} ${HOST_SRC_LIST})
+SET_TARGET_PROPERTIES(log PROPERTIES LINK_FLAGS -Wl,--no-undefined)
+target_link_libraries(log ${CMAKE_THREAD_LIBS_INIT})
+
+
+install(TARGETS log DESTINATION ${INSTALL_LIB_DIR})
+install(DIRECTORY ${PROJECT_SOURCE_DIR}/include/log DESTINATION ${INSTALL_INCLUDE_DIR} FILES_MATCHING PATTERN "*.h")
+
+
+
diff --git a/libsparse/CMakeLists.txt b/libsparse/CMakeLists.txt
new file mode 100644
index 0000000..37f0e13
--- /dev/null
+++ b/libsparse/CMakeLists.txt
@@ -0,0 +1,14 @@
+include_directories ("${CMAKE_CURRENT_SOURCE_DIR}/include" ${ZLIB_INCLUDE_DIR})
+
+set(SRC_LIST backed_block.c
+      	output_file.c
+        sparse.c
+        sparse_crc32.c
+        sparse_err.c
+        sparse_read.c)
+
+add_library(sparse SHARED ${SRC_LIST})
+target_link_libraries(sparse ${ZLIB_LIBRARIES})
+
+install(TARGETS sparse DESTINATION ${INSTALL_LIB_DIR})
+install(DIRECTORY ${PROJECT_SOURCE_DIR}/sparse/include/sparse DESTINATION ${INSTALL_INCLUDE_DIR}/sparse FILES_MATCHING PATTERN "*.h")
diff --git a/libutils/CMakeLists.txt b/libutils/CMakeLists.txt
new file mode 100644
index 0000000..8ce6ec2
--- /dev/null
+++ b/libutils/CMakeLists.txt
@@ -0,0 +1,36 @@
+include_directories ("${PROJECT_SOURCE_DIR}/include" "${PROJECT_SOURCE_DIR}/include/utils")
+
+set(SRC_LIST	BasicHashtable.cpp
+	BlobCache.cpp
+	CallStack.cpp
+	FileMap.cpp
+	JenkinsHash.cpp
+	LinearAllocator.cpp
+	LinearTransform.cpp
+	Log.cpp
+	Printer.cpp
+	PropertyMap.cpp
+	ProcessCallStack.cpp
+	PropertyMap.cpp
+	RefBase.cpp
+	SharedBuffer.cpp
+	Static.cpp
+	StopWatch.cpp
+	String8.cpp
+	String16.cpp
+	SystemClock.cpp
+	Threads.cpp 
+	Timers.cpp 
+	Tokenizer.cpp 
+	Unicode.cpp
+	VectorImpl.cpp
+	misc.cpp
+	Looper.cpp)
+
+add_definitions(-DLIBUTILS_NATIVE=1 -Wno-multichar)
+
+add_library(utils SHARED ${SRC_LIST})
+SET_TARGET_PROPERTIES(utils PROPERTIES LINK_FLAGS -Wl,--no-undefined)
+target_link_libraries(utils cutils backtrace log)
+install(TARGETS utils DESTINATION ${INSTALL_LIB_DIR})
+install(DIRECTORY ${PROJECT_SOURCE_DIR}/include/utils DESTINATION ${INSTALL_INCLUDE_DIR} FILES_MATCHING PATTERN "*.h")
diff --git a/libziparchive/CMakeLists.txt b/libziparchive/CMakeLists.txt
new file mode 100644
index 0000000..bdcfa04
--- /dev/null
+++ b/libziparchive/CMakeLists.txt
@@ -0,0 +1,11 @@
+find_package(ZLIB REQUIRED)
+
+include_directories ("${PROJECT_SOURCE_DIR}/include" ${ZLIB_INCLUDE_DIR})
+add_definitions(-DLIBUTILS_NATIVE=1 -Wno-multichar)
+
+add_library(ziparchive SHARED zip_archive.cc)
+SET_TARGET_PROPERTIES(ziparchive PROPERTIES LINK_FLAGS -Wl,--no-undefined)
+target_link_libraries(ziparchive utils ${ZLIB_LIBRARIES})
+
+install(TARGETS ziparchive DESTINATION ${INSTALL_LIB_DIR})
+install(DIRECTORY ${PROJECT_SOURCE_DIR}/include/ziparchive DESTINATION ${INSTALL_INCLUDE_DIR} FILES_MATCHING PATTERN "*.h")
diff --git a/libziparchive/zip_archive.cc b/libziparchive/zip_archive.cc
index df5e3bd..e555522 100644
--- a/libziparchive/zip_archive.cc
+++ b/libziparchive/zip_archive.cc
@@ -31,7 +31,7 @@
 #include <utils/FileMap.h>
 #include <zlib.h>
 
-#include <JNIHelp.h>  // TEMP_FAILURE_RETRY may or may not be in unistd
+//#include <JNIHelp.h>  // TEMP_FAILURE_RETRY may or may not be in unistd
 
 #include "ziparchive/zip_archive.h"
 
diff --git a/libzipfile/CMakeLists.txt b/libzipfile/CMakeLists.txt
new file mode 100644
index 0000000..29fd899
--- /dev/null
+++ b/libzipfile/CMakeLists.txt
@@ -0,0 +1,11 @@
+find_package(ZLIB REQUIRED)
+
+include_directories ("${PROJECT_SOURCE_DIR}/include" ${ZLIB_INCLUDE_DIR})
+add_definitions(-DLIBUTILS_NATIVE=1 -Wno-multichar)
+
+add_library(zipfile SHARED centraldir.c zipfile.c)
+SET_TARGET_PROPERTIES(zipfile PROPERTIES LINK_FLAGS -Wl,--no-undefined)
+target_link_libraries(zipfile utils ${ZLIB_LIBRARIES})
+
+install(TARGETS zipfile DESTINATION ${INSTALL_LIB_DIR})
+install(DIRECTORY ${PROJECT_SOURCE_DIR}/include/zipfile DESTINATION ${INSTALL_INCLUDE_DIR} FILES_MATCHING PATTERN "*.h")
