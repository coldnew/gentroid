diff --git a/CMakeLists.txt b/CMakeLists.txt
new file mode 100644
index 0000000..c56145f
--- /dev/null
+++ b/CMakeLists.txt
@@ -0,0 +1,92 @@
+project(libcore)
+cmake_minimum_required(VERSION 2.8)
+
+include(/usr/share/android/cmake/AndroidConfig.cmake)
+
+find_package(ICU REQUIRED)
+find_package(ZLIB REQUIRED)
+find_package(OpenSSL REQUIRED)
+find_package(EXPAT REQUIRED)
+find_package(Android COMPONENTS syscore nativehelper fdm REQUIRED )
+
+add_definitions(-Wall -Wextra)
+include_directories("${PROJECT_SOURCE_DIR}/include" ${ANDROID_INCLUDE_DIRS} ${OPENSSL_INCLUDE_DIRS} ${ICU_INCLUDE_DIRS} ${ZLIB_INCLUDE_DIRS} ${EXPAT_INCLUDE_DIRS})
+
+set(DALVIK_SRC_LIST
+	dalvik/src/main/native/org_apache_harmony_dalvik_NativeTestTarget.cpp)
+
+set(LUNI_SRC_LIST_FILES
+	AsynchronousCloseMonitor.cpp
+	ExecStrings.cpp
+	IcuUtilities.cpp
+	JniException.cpp
+	NetworkUtilities.cpp
+	Register.cpp
+	ZipUtilities.cpp
+	android_system_OsConstants.cpp
+  canonicalize_path.cpp
+	cbigint.cpp
+	java_io_Console.cpp
+	java_io_File.cpp
+	java_io_ObjectStreamClass.cpp
+	java_lang_Character.cpp
+	java_lang_Double.cpp
+	java_lang_Float.cpp
+	java_lang_Math.cpp
+	java_lang_ProcessManager.cpp
+	java_lang_RealToString.cpp
+	java_lang_StrictMath.cpp
+	java_lang_StringToReal.cpp
+	java_lang_System.cpp
+	java_math_NativeBN.cpp
+	java_nio_ByteOrder.cpp
+	java_nio_charset_Charsets.cpp
+	java_text_Bidi.cpp
+	java_util_jar_StrictJarFile.cpp
+	java_util_regex_Matcher.cpp
+	java_util_regex_Pattern.cpp
+	java_util_zip_Adler32.cpp
+	java_util_zip_CRC32.cpp
+	java_util_zip_Deflater.cpp
+	java_util_zip_Inflater.cpp
+	libcore_icu_AlphabeticIndex.cpp
+	libcore_icu_DateIntervalFormat.cpp
+	libcore_icu_ICU.cpp
+	libcore_icu_NativeBreakIterator.cpp
+	libcore_icu_NativeCollation.cpp
+	libcore_icu_NativeConverter.cpp
+	libcore_icu_NativeDecimalFormat.cpp
+	libcore_icu_NativeIDN.cpp
+	libcore_icu_NativeNormalizer.cpp
+	libcore_icu_NativePluralRules.cpp
+	libcore_icu_TimeZoneNames.cpp
+	libcore_icu_Transliterator.cpp
+	libcore_io_AsynchronousCloseMonitor.cpp
+	libcore_io_Memory.cpp
+	libcore_io_Posix.cpp
+	org_apache_harmony_xml_ExpatParser.cpp
+	readlink.cpp
+	sun_misc_Unsafe.cpp
+	valueOf.cpp)
+
+set(LUNI_SRC_LIST)
+foreach(_file ${LUNI_SRC_LIST_FILES})
+  list(APPEND LUNI_SRC_LIST "luni/src/main/native/${_file}")
+endforeach()
+
+
+add_library(javacore SHARED ${LUNI_SRC_LIST} ${DALVIK_SRC_LIST})
+target_link_libraries(javacore ${ANDROID_LIBRARIES}  ${ICU_I18N_LIBRARIES} ${ICU_LIBRARIES} ${OPENSSL_LIBRARIES}
+						${EXPAT_LIBRARIES}  ${ZLIB_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT})
+SET_TARGET_PROPERTIES(javacore PROPERTIES LINK_FLAGS -Wl,--no-undefined)
+
+
+install(TARGETS javacore DESTINATION ${INSTALL_LIB_DIR})
+install(DIRECTORY ${PROJECT_SOURCE_DIR}/luni/src/main/native/ DESTINATION ${INSTALL_INCLUDE_DIR}/javacore FILES_MATCHING PATTERN "*.h")
+install(DIRECTORY ${PROJECT_SOURCE_DIR}/include/ DESTINATION ${INSTALL_INCLUDE_DIR}/javacore FILES_MATCHING PATTERN "*.h")
+
+
+
+
+
+
diff --git a/build.xml b/build.xml
new file mode 100644
index 0000000..da79bb5
--- /dev/null
+++ b/build.xml
@@ -0,0 +1,125 @@
+
+
+<project name="libcore" default="dist" basedir=".">
+    <description>
+        core library for Android
+    </description>
+	<property name="boot" location="boot"/>
+	<property name="dist" location="dist"/>
+	<property name="dex" location="dist-dex"/>
+	<property name="lib" location="lib"/>
+	<property name="buildcore" location="build/libcore"/>
+	<property name="jarcore" location="jar/libcore"/>
+	<property name="srctest" location="crypto;dalvik;dom;harmony-tests;json;luni;support;xml"/>
+	<property name="buildtest" location="build/test"/>
+	<property name="jartest" location="jar/test"/>
+	<property name="buildtestssupport" location="build/support"/>
+
+	<path id="extlibs">
+		<fileset dir="lib">
+			<include name="*.jar"/>
+		</fileset>
+		<fileset dir="dist">
+			<include name="*.jar"/>
+		</fileset>
+	</path>
+	
+	<target name="dist" depends="dist-core" />
+
+	<target name="compile" depends="compile-core, compile-test" description="compile the source for all" />
+
+	<target name="init">
+		<tstamp/>
+    	<mkdir dir="${buildtestssupport}"/>
+		<tstamp/>
+		<mkdir dir="${buildcore}"/>
+		<tstamp/>
+    	<mkdir dir="${dist}"/>
+		<tstamp/>
+		<mkdir dir="${boot}"/>
+		<tstamp/>
+		<mkdir dir="${dex}"/>
+	</target>
+
+  	<target name="compile-core" depends="init" description="compile the source " >
+		<javac source="7" target="1.7" encoding="UTF-8" destdir="${buildcore}" includeantruntime="false" >
+			<classpath path=""/>
+			<bootclasspath path=""/>
+			<src path="dalvik"/>
+			<src path="dex"/>
+			<src path="dom"/>
+			<src path="json"/>
+			<src path="luni"/>
+			<src path="xml"/>
+			<src path="libart"/>
+			<include name="src/main/java/**"/>
+		</javac>
+	</target>
+
+	<target name="compile-testssupport" depends="dist-core" description="compile tests support " >
+		<javac source="7" target="1.7" encoding="UTF-8" destdir="${buildtestssupport}" bootclasspath="${boot}/core.jar">
+			<src path="support"/>
+			<include name="src/test/java/**"/>
+			<classpath refid="extlibs"/>
+		</javac>
+	</target>
+
+	<target name="compile-test" depends="dist-core, dist-testssupport" description="compile the tests " >
+		<javac source="7" target="1.7" encoding="UTF-8" destdir="${buildtest}" bootclasspath="${boot}/core.jar">
+			<src path="dalvik"/>
+			<src path="dom"/>
+			<src path="harmony-tests"/>
+			<src path="json"/>
+			<src path="luni"/>
+			<src path="xml"/>
+			<include name="src/test/java/**"/>
+			<classpath refid="extlibs"/>
+		</javac>
+	</target>
+
+
+	<target name="dist-core" depends="compile-core"
+		description="generate the distribution" >
+	<jar jarfile="${boot}/core.jar" basedir="${buildcore}" />
+	</target>
+	
+
+	<target name="dist-testssupport" depends="compile-testssupport"
+		description="generate the distribution of tests-support" >
+	<jar jarfile="${dist}/tests-support.jar" basedir="${buildtestssupport}" />
+	</target>
+
+	<target name="dist-test" depends="compile-test"
+	   description="generate the distribution" >
+	<jar jarfile="${dist}/tests.jar" basedir="${buildtest}" />
+	</target>
+
+	<target name="swingui" depends="dist-test">
+		<java classname="junit.swingui.TestRunner" fork="yes">
+			<arg value="junit.samples.AllTests" />
+			<classpath>
+				<pathelement location="lib" />
+				<pathelement location="lib/junit.jar" />
+			</classpath>
+		</java>
+	</target>
+
+    <target name="dex" depends="dist">
+        <apply executable="dx" dest="${dex}/" parallel="false">
+            <arg value="--dex"/>
+			<arg value="--core-library"/>
+            <targetfile prefix="--output="/>
+            <srcfile/>
+            <fileset dir="${boot}" includes="**/*.jar"/>
+            <mapper type="glob" from="*.jar" to="*-dex.jar"/>
+        </apply>
+    </target>
+
+	<target name="clean"
+		description="clean up" >
+		<!-- Delete the ${build} and ${dist} directory trees -->
+		<delete dir="${build}"/>
+		<delete dir="${dist}"/>
+	</target>
+
+</project>
diff --git a/luni/src/main/native/ZipUtilities.h b/luni/src/main/native/ZipUtilities.h
index fe0f977..eab7952 100644
--- a/luni/src/main/native/ZipUtilities.h
+++ b/luni/src/main/native/ZipUtilities.h
@@ -22,6 +22,18 @@
 #include "jni.h"
 #include "zlib.h"
 
+#include "zconf.h" // For DEF_WBITS and DEF_MEM_LEVEL.
+
+#ifndef DEF_WBITS
+#  define DEF_WBITS MAX_WBITS
+#endif
+
+#if MAX_MEM_LEVEL >= 8
+#  define DEF_MEM_LEVEL 8
+#else
+#  define DEF_MEM_LEVEL  MAX_MEM_LEVEL
+#endif
+
 class NativeZipStream {
 public:
     UniquePtr<jbyte[]> input;
diff --git a/luni/src/main/native/java_lang_StrictMath.cpp b/luni/src/main/native/java_lang_StrictMath.cpp
index cfe375e..c54435a 100644
--- a/luni/src/main/native/java_lang_StrictMath.cpp
+++ b/luni/src/main/native/java_lang_StrictMath.cpp
@@ -16,7 +16,7 @@
 
 #define LOG_TAG "StrictMath"
 
-#include "../../external/fdlibm/fdlibm.h"
+#include "fdlibm.h"
 
 #include "jni.h"
 #include "JNIHelp.h"
diff --git a/luni/src/main/native/java_math_NativeBN.cpp b/luni/src/main/native/java_math_NativeBN.cpp
index be87ea6..a896226 100644
--- a/luni/src/main/native/java_math_NativeBN.cpp
+++ b/luni/src/main/native/java_math_NativeBN.cpp
@@ -320,8 +320,8 @@ static jlong NativeBN_longInt(JNIEnv* env, jclass, jlong a0) {
   bn_check_top(a);
   int wLen = a->top;
   if (wLen == 0) {
-    return 0;
-  }
+      return 0;
+      }
 
 #ifdef __LP64__
   jlong result = a->d[0];
@@ -329,7 +329,7 @@ static jlong NativeBN_longInt(JNIEnv* env, jclass, jlong a0) {
   jlong result = static_cast<jlong>(a->d[0]) & 0xffffffff;
   if (wLen > 1) {
     result |= static_cast<jlong>(a->d[1]) << 32;
-  }
+      }
 #endif
   return a->neg ? -result : result;
 }
diff --git a/luni/src/main/native/java_util_zip_Deflater.cpp b/luni/src/main/native/java_util_zip_Deflater.cpp
index 1afd36e..e816332 100644
--- a/luni/src/main/native/java_util_zip_Deflater.cpp
+++ b/luni/src/main/native/java_util_zip_Deflater.cpp
@@ -21,7 +21,6 @@
 #include "JniException.h"
 #include "ScopedPrimitiveArray.h"
 #include "ZipUtilities.h"
-#include "zutil.h" // For DEF_WBITS and DEF_MEM_LEVEL.
 
 static void Deflater_setDictionaryImpl(JNIEnv* env, jobject, jbyteArray dict, int off, int len, jlong handle) {
     toNativeZipStream(handle)->setDictionary(env, dict, off, len, false);
diff --git a/luni/src/main/native/java_util_zip_Inflater.cpp b/luni/src/main/native/java_util_zip_Inflater.cpp
index ca3ee09..ed6d826 100644
--- a/luni/src/main/native/java_util_zip_Inflater.cpp
+++ b/luni/src/main/native/java_util_zip_Inflater.cpp
@@ -21,7 +21,6 @@
 #include "JniException.h"
 #include "ScopedPrimitiveArray.h"
 #include "ZipUtilities.h"
-#include "zutil.h" // For DEF_WBITS and DEF_MEM_LEVEL.
 #include <errno.h>
 
 static jlong Inflater_createStream(JNIEnv* env, jobject, jboolean noHeader) {
diff --git a/luni/src/main/native/libcore_icu_ICU.cpp b/luni/src/main/native/libcore_icu_ICU.cpp
index cc51722..61aa888 100644
--- a/luni/src/main/native/libcore_icu_ICU.cpp
+++ b/luni/src/main/native/libcore_icu_ICU.cpp
@@ -47,7 +47,8 @@
 #include "unicode/uloc.h"
 #include "unicode/ulocdata.h"
 #include "unicode/ustring.h"
-#include "ureslocs.h"
+#include "unicode/udata.h"
+//#include "ureslocs.h"
 #include "valueOf.h"
 
 #include <errno.h>
@@ -63,6 +64,8 @@
 #include <unistd.h>
 #include <vector>
 
+#define U_ICUDATA_CURR U_ICUDATA_NAME U_TREE_SEPARATOR_STRING "curr"
+
 // TODO: put this in a header file and use it everywhere!
 // DISALLOW_COPY_AND_ASSIGN disallows the copy and operator= functions.
 // It goes in the private: declarations in a class.
@@ -811,54 +814,5 @@ static JNINativeMethod gMethods[] = {
     NATIVE_METHOD(ICU, toUpperCase, "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;"),
 };
 void register_libcore_icu_ICU(JNIEnv* env) {
-    std::string path;
-    path = u_getDataDirectory();
-    path += "/";
-    path += U_ICUDATA_NAME;
-    path += ".dat";
-
-    #define FAIL_WITH_STRERROR(s) \
-        ALOGE("Couldn't " s " '%s': %s", path.c_str(), strerror(errno)); \
-        abort();
-    #define MAYBE_FAIL_WITH_ICU_ERROR(s) \
-        if (status != U_ZERO_ERROR) {\
-            ALOGE("Couldn't initialize ICU (" s "): %s (%s)", u_errorName(status), path.c_str()); \
-            abort(); \
-        }
-
-    // Open the file and get its length.
-    ScopedFd fd(open(path.c_str(), O_RDONLY));
-    if (fd.get() == -1) {
-        FAIL_WITH_STRERROR("open");
-    }
-    struct stat sb;
-    if (fstat(fd.get(), &sb) == -1) {
-        FAIL_WITH_STRERROR("stat");
-    }
-
-    // Map it.
-    void* data = mmap(NULL, sb.st_size, PROT_READ, MAP_SHARED, fd.get(), 0);
-    if (data == MAP_FAILED) {
-        FAIL_WITH_STRERROR("mmap");
-    }
-
-    // Tell the kernel that accesses are likely to be random rather than sequential.
-    if (madvise(data, sb.st_size, MADV_RANDOM) == -1) {
-        FAIL_WITH_STRERROR("madvise(MADV_RANDOM)");
-    }
-
-    // Tell ICU to use our memory-mapped data.
-    UErrorCode status = U_ZERO_ERROR;
-    udata_setCommonData(data, &status);
-    MAYBE_FAIL_WITH_ICU_ERROR("udata_setCommonData");
-    // Tell ICU it can *only* use our memory-mapped data.
-    udata_setFileAccess(UDATA_NO_FILES, &status);
-    MAYBE_FAIL_WITH_ICU_ERROR("udata_setFileAccess");
-
-    // Failures to find the ICU data tend to be somewhat obscure because ICU loads its data on first
-    // use, which can be anywhere. Force initialization up front so we can report a nice clear error
-    // and bail.
-    u_init(&status);
-    MAYBE_FAIL_WITH_ICU_ERROR("u_init");
     jniRegisterNativeMethods(env, "libcore/icu/ICU", gMethods, NELEM(gMethods));
 }
diff --git a/luni/src/main/native/libcore_icu_NativeDecimalFormat.cpp b/luni/src/main/native/libcore_icu_NativeDecimalFormat.cpp
index c0fd42b..e018957 100644
--- a/luni/src/main/native/libcore_icu_NativeDecimalFormat.cpp
+++ b/luni/src/main/native/libcore_icu_NativeDecimalFormat.cpp
@@ -22,7 +22,7 @@
 #include <vector>
 
 #include "cutils/log.h"
-#include "digitlst.h"
+//#include "digitlst.h"
 #include "IcuUtilities.h"
 #include "JniConstants.h"
 #include "JniException.h"
@@ -60,8 +60,8 @@ static DecimalFormatSymbols* makeDecimalFormatSymbols(JNIEnv* env,
     ScopedJavaUnicodeString nan(env, nan0);
     ScopedJavaUnicodeString minusSign(env, minusSign0);
     UnicodeString groupingSeparator(groupingSeparator0);
-
-    DecimalFormatSymbols* result = new DecimalFormatSymbols;
+	UErrorCode status;
+    DecimalFormatSymbols* result = new DecimalFormatSymbols(status);
     result->setSymbol(DecimalFormatSymbols::kCurrencySymbol, currencySymbol.unicodeString());
     result->setSymbol(DecimalFormatSymbols::kDecimalSeparatorSymbol, UnicodeString(decimalSeparator));
     result->setSymbol(DecimalFormatSymbols::kDigitSymbol, UnicodeString(digit));
diff --git a/luni/src/main/native/org_apache_harmony_xml_ExpatParser.cpp b/luni/src/main/native/org_apache_harmony_xml_ExpatParser.cpp
index 2ea8806..6577e86 100644
--- a/luni/src/main/native/org_apache_harmony_xml_ExpatParser.cpp
+++ b/luni/src/main/native/org_apache_harmony_xml_ExpatParser.cpp
@@ -30,7 +30,7 @@
 #include "unicode/unistr.h"
 
 #include <string.h>
-#include <libexpat/expat.h>
+#include <expat.h>
 
 #define BUCKET_COUNT 128
 
diff --git a/luni/src/main/native/ustrenum.h b/luni/src/main/native/ustrenum.h
new file mode 100644
index 0000000..ffa2c32
--- /dev/null
+++ b/luni/src/main/native/ustrenum.h
@@ -0,0 +1,83 @@
+/*
+**********************************************************************
+* Copyright (c) 2002-2012, International Business Machines
+* Corporation and others.  All Rights Reserved.
+**********************************************************************
+* Author: Alan Liu
+* Created: November 11 2002
+* Since: ICU 2.4
+**********************************************************************
+*/
+#ifndef _USTRENUM_H_
+#define _USTRENUM_H_
+
+#include "unicode/uenum.h"
+#include "unicode/strenum.h"
+
+//----------------------------------------------------------------------
+U_NAMESPACE_BEGIN
+
+/**
+ * A wrapper to make a UEnumeration into a StringEnumeration.  The
+ * wrapper adopts the UEnumeration is wraps.
+ */
+class U_COMMON_API UStringEnumeration : public StringEnumeration {
+
+public:
+    /**
+     * Constructor.  This constructor adopts its UEnumeration
+     * argument.
+     * @param uenum a UEnumeration object.  This object takes
+     * ownership of 'uenum' and will close it in its destructor.  The
+     * caller must not call uenum_close on 'uenum' after calling this
+     * constructor.
+     */
+    UStringEnumeration(UEnumeration* uenum);
+
+    /**
+     * Destructor.  This closes the UEnumeration passed in to the
+     * constructor.
+     */
+    virtual ~UStringEnumeration();
+
+    /**
+     * Return the number of elements that the iterator traverses.
+     * @param status the error code.
+     * @return number of elements in the iterator.
+     */
+    virtual int32_t count(UErrorCode& status) const;
+
+    virtual const char* next(int32_t *resultLength, UErrorCode& status);
+
+    /**
+     * Returns the next element a UnicodeString*.  If there are no
+     * more elements, returns NULL.
+     * @param status the error code.
+     * @return a pointer to the string, or NULL.
+     */
+    virtual const UnicodeString* snext(UErrorCode& status);
+
+    /**
+     * Resets the iterator.
+     * @param status the error code.
+     */
+    virtual void reset(UErrorCode& status);
+
+    /**
+     * ICU4C "poor man's RTTI", returns a UClassID for the actual ICU class.
+     */
+    virtual UClassID getDynamicClassID() const;
+
+    /**
+     * ICU4C "poor man's RTTI", returns a UClassID for this ICU class.
+     */
+    static UClassID U_EXPORT2 getStaticClassID();
+
+private:
+    UEnumeration *uenum; // owned
+};
+
+U_NAMESPACE_END
+
+#endif
+
diff --git a/luni/src/test/java/com/android/org/bouncycastle/crypto/digests/DigestTest.java b/luni/src/test/java/com/android/org/bouncycastle/crypto/digests/DigestTest.java
index 8708214..8c4fbce 100644
--- a/luni/src/test/java/com/android/org/bouncycastle/crypto/digests/DigestTest.java
+++ b/luni/src/test/java/com/android/org/bouncycastle/crypto/digests/DigestTest.java
@@ -14,11 +14,11 @@
  * limitations under the License.
  */
 
-package com.android.org.bouncycastle.crypto.digests;
+package org.bouncycastle.crypto.digests;
 
 import junit.framework.TestCase;
-import com.android.org.bouncycastle.crypto.Digest;
-import com.android.org.bouncycastle.crypto.ExtendedDigest;
+import org.bouncycastle.crypto.Digest;
+import org.bouncycastle.crypto.ExtendedDigest;
 
 /**
  * Implements unit tests for our JNI wrapper around OpenSSL. We use the
diff --git a/luni/src/test/java/com/android/org/bouncycastle/jce/provider/CertBlacklistTest.java b/luni/src/test/java/com/android/org/bouncycastle/jce/provider/CertBlacklistTest.java
index 6d033d3..82912d9 100644
--- a/luni/src/test/java/com/android/org/bouncycastle/jce/provider/CertBlacklistTest.java
+++ b/luni/src/test/java/com/android/org/bouncycastle/jce/provider/CertBlacklistTest.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.android.org.bouncycastle.jce.provider;
+package org.bouncycastle.jce.provider;
 
 import java.io.ByteArrayInputStream;
 import java.io.File;
@@ -32,10 +32,10 @@ import java.security.PublicKey;
 import java.util.HashSet;
 import java.util.Set;
 import junit.framework.TestCase;
-import com.android.org.bouncycastle.jce.provider.CertBlacklist;
-import com.android.org.bouncycastle.crypto.Digest;
-import com.android.org.bouncycastle.util.encoders.Base64;
-import com.android.org.bouncycastle.util.encoders.Hex;
+import org.bouncycastle.jce.provider.CertBlacklist;
+import org.bouncycastle.crypto.Digest;
+import org.bouncycastle.util.encoders.Base64;
+import org.bouncycastle.util.encoders.Hex;
 
 public class CertBlacklistTest extends TestCase {
 
diff --git a/luni/src/test/java/libcore/java/security/cert/CertificateFactoryTest.java b/luni/src/test/java/libcore/java/security/cert/CertificateFactoryTest.java
index e2f21e8..100d20d 100644
--- a/luni/src/test/java/libcore/java/security/cert/CertificateFactoryTest.java
+++ b/luni/src/test/java/libcore/java/security/cert/CertificateFactoryTest.java
@@ -16,11 +16,11 @@
 
 package libcore.java.security.cert;
 
-import com.android.org.bouncycastle.asn1.x509.BasicConstraints;
-import com.android.org.bouncycastle.asn1.x509.X509Extensions;
-import com.android.org.bouncycastle.x509.X509V3CertificateGenerator;
-import com.android.org.bouncycastle.x509.extension.AuthorityKeyIdentifierStructure;
-import com.android.org.bouncycastle.x509.extension.SubjectKeyIdentifierStructure;
+import org.bouncycastle.asn1.x509.BasicConstraints;
+import org.bouncycastle.asn1.x509.X509Extensions;
+import org.bouncycastle.x509.X509V3CertificateGenerator;
+import org.bouncycastle.x509.extension.AuthorityKeyIdentifierStructure;
+import org.bouncycastle.x509.extension.SubjectKeyIdentifierStructure;
 
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
diff --git a/support/src/test/java/libcore/java/security/TestKeyStore.java b/support/src/test/java/libcore/java/security/TestKeyStore.java
index 203c028..7abf66b 100644
--- a/support/src/test/java/libcore/java/security/TestKeyStore.java
+++ b/support/src/test/java/libcore/java/security/TestKeyStore.java
@@ -16,18 +16,18 @@
 
 package libcore.java.security;
 
-import com.android.org.bouncycastle.asn1.DEROctetString;
-import com.android.org.bouncycastle.asn1.x509.BasicConstraints;
-import com.android.org.bouncycastle.asn1.x509.ExtendedKeyUsage;
-import com.android.org.bouncycastle.asn1.x509.GeneralName;
-import com.android.org.bouncycastle.asn1.x509.GeneralNames;
-import com.android.org.bouncycastle.asn1.x509.GeneralSubtree;
-import com.android.org.bouncycastle.asn1.x509.KeyPurposeId;
-import com.android.org.bouncycastle.asn1.x509.KeyUsage;
-import com.android.org.bouncycastle.asn1.x509.NameConstraints;
-import com.android.org.bouncycastle.asn1.x509.X509Extensions;
-import com.android.org.bouncycastle.jce.provider.BouncyCastleProvider;
-import com.android.org.bouncycastle.x509.X509V3CertificateGenerator;
+import org.bouncycastle.asn1.DEROctetString;
+import org.bouncycastle.asn1.x509.BasicConstraints;
+import org.bouncycastle.asn1.x509.ExtendedKeyUsage;
+import org.bouncycastle.asn1.x509.GeneralName;
+import org.bouncycastle.asn1.x509.GeneralNames;
+import org.bouncycastle.asn1.x509.GeneralSubtree;
+import org.bouncycastle.asn1.x509.KeyPurposeId;
+import org.bouncycastle.asn1.x509.KeyUsage;
+import org.bouncycastle.asn1.x509.NameConstraints;
+import org.bouncycastle.asn1.x509.X509Extensions;
+import org.bouncycastle.jce.provider.BouncyCastleProvider;
+import org.bouncycastle.x509.X509V3CertificateGenerator;
 import java.io.ByteArrayInputStream;
 import java.io.PrintStream;
 import java.math.BigInteger;
@@ -597,14 +597,12 @@ public final class TestKeyStore extends Assert {
                                 new GeneralNames(subjectAltName).getEncoded());
         }
         if (!permittedNameConstraints.isEmpty() || !excludedNameConstraints.isEmpty()) {
+			Vector<GeneralSubtree> permittedNameConstraintsVector = new Vector<GeneralSubtree>(permittedNameConstraints);
+			Vector<GeneralSubtree> excludedNameConstraintsVector = new Vector<GeneralSubtree>(excludedNameConstraints);
             x509cg.addExtension(X509Extensions.NameConstraints,
                                 true,
-                                new NameConstraints(permittedNameConstraints.toArray(
-                                                        new GeneralSubtree[
-                                                            permittedNameConstraints.size()]),
-                                                    excludedNameConstraints.toArray(
-                                                        new GeneralSubtree[
-                                                            excludedNameConstraints.size()])));
+                                new NameConstraints(permittedNameConstraintsVector,
+                                                    excludedNameConstraintsVector));
         }
 
         X509Certificate x509c = x509cg.generateX509Certificate(privateKey);
